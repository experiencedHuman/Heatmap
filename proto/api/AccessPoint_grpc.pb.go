// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/AccessPoint.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APServiceClient is the client API for APService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APServiceClient interface {
	GetAccessPoint(ctx context.Context, in *APRequest, opts ...grpc.CallOption) (*AccessPoint, error)
	ListAccessPoints(ctx context.Context, in *APRequest, opts ...grpc.CallOption) (APService_ListAccessPointsClient, error)
	ListAllAPNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (APService_ListAllAPNamesClient, error)
}

type aPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPServiceClient(cc grpc.ClientConnInterface) APServiceClient {
	return &aPServiceClient{cc}
}

func (c *aPServiceClient) GetAccessPoint(ctx context.Context, in *APRequest, opts ...grpc.CallOption) (*AccessPoint, error) {
	out := new(AccessPoint)
	err := c.cc.Invoke(ctx, "/api.APService/GetAccessPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPServiceClient) ListAccessPoints(ctx context.Context, in *APRequest, opts ...grpc.CallOption) (APService_ListAccessPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &APService_ServiceDesc.Streams[0], "/api.APService/ListAccessPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPServiceListAccessPointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APService_ListAccessPointsClient interface {
	Recv() (*APResponse, error)
	grpc.ClientStream
}

type aPServiceListAccessPointsClient struct {
	grpc.ClientStream
}

func (x *aPServiceListAccessPointsClient) Recv() (*APResponse, error) {
	m := new(APResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPServiceClient) ListAllAPNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (APService_ListAllAPNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &APService_ServiceDesc.Streams[1], "/api.APService/ListAllAPNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPServiceListAllAPNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APService_ListAllAPNamesClient interface {
	Recv() (*APName, error)
	grpc.ClientStream
}

type aPServiceListAllAPNamesClient struct {
	grpc.ClientStream
}

func (x *aPServiceListAllAPNamesClient) Recv() (*APName, error) {
	m := new(APName)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APServiceServer is the server API for APService service.
// All implementations must embed UnimplementedAPServiceServer
// for forward compatibility
type APServiceServer interface {
	GetAccessPoint(context.Context, *APRequest) (*AccessPoint, error)
	ListAccessPoints(*APRequest, APService_ListAccessPointsServer) error
	ListAllAPNames(*emptypb.Empty, APService_ListAllAPNamesServer) error
	mustEmbedUnimplementedAPServiceServer()
}

// UnimplementedAPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPServiceServer struct {
}

func (UnimplementedAPServiceServer) GetAccessPoint(context.Context, *APRequest) (*AccessPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessPoint not implemented")
}
func (UnimplementedAPServiceServer) ListAccessPoints(*APRequest, APService_ListAccessPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccessPoints not implemented")
}
func (UnimplementedAPServiceServer) ListAllAPNames(*emptypb.Empty, APService_ListAllAPNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllAPNames not implemented")
}
func (UnimplementedAPServiceServer) mustEmbedUnimplementedAPServiceServer() {}

// UnsafeAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APServiceServer will
// result in compilation errors.
type UnsafeAPServiceServer interface {
	mustEmbedUnimplementedAPServiceServer()
}

func RegisterAPServiceServer(s grpc.ServiceRegistrar, srv APServiceServer) {
	s.RegisterService(&APService_ServiceDesc, srv)
}

func _APService_GetAccessPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APServiceServer).GetAccessPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APService/GetAccessPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APServiceServer).GetAccessPoint(ctx, req.(*APRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APService_ListAccessPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(APRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APServiceServer).ListAccessPoints(m, &aPServiceListAccessPointsServer{stream})
}

type APService_ListAccessPointsServer interface {
	Send(*APResponse) error
	grpc.ServerStream
}

type aPServiceListAccessPointsServer struct {
	grpc.ServerStream
}

func (x *aPServiceListAccessPointsServer) Send(m *APResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _APService_ListAllAPNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APServiceServer).ListAllAPNames(m, &aPServiceListAllAPNamesServer{stream})
}

type APService_ListAllAPNamesServer interface {
	Send(*APName) error
	grpc.ServerStream
}

type aPServiceListAllAPNamesServer struct {
	grpc.ServerStream
}

func (x *aPServiceListAllAPNamesServer) Send(m *APName) error {
	return x.ServerStream.SendMsg(m)
}

// APService_ServiceDesc is the grpc.ServiceDesc for APService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.APService",
	HandlerType: (*APServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessPoint",
			Handler:    _APService_GetAccessPoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccessPoints",
			Handler:       _APService_ListAccessPoints_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllAPNames",
			Handler:       _APService_ListAllAPNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/AccessPoint.proto",
}
